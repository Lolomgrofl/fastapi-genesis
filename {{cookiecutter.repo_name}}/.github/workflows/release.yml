name: FastAPI Genesis CICD

on:
  pull_request:
    types:
       - closed

jobs:

  if_merged:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
    - run: |
        echo The PR was merged

  build-and-deploy:

    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:

    - name: Checkout repo
      uses: actions/checkout@v3
    - run: |
        VERSION=$(python -c "from app import __version__; print(__version__)")
        echo "IMAGE_TAG=$VERSION" >> $GITHUB_ENV
    - name: Check image tag
      run: |
        echo "${{ env.IMAGE_TAG }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        role-to-assume: your-role-arn
        aws-region: us-east-1 # Optional, defaults to us-east-1
    - run: aws sts get-caller-identity

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        REPOSITORY: "repo-name"
        IMAGE_TAG: ${{ env.IMAGE_TAG }}
      run: |
        echo "Image tag: $IMAGE_TAG"
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
        docker build -t $REGISTRY/$REPOSITORY:latest .
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
        docker push $REGISTRY/$REPOSITORY:latest

    - uses: actions/checkout@v3
    - name: SSH to EC2 instance and build project
      env:
        PRIVATE_KEY: ${{ secrets.PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOST }}
        USER_NAME: ${{ secrets.EC2_USER }}

      run: |
        echo "$PRIVATE_KEY" > private_key && chmod 600 private_key
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} '
            ls -la &&
            cd your_repo &&
            make down &&
            git checkout master &&
            git fetch --all &&
            git pull &&
            docker image rm your_app_image &&
            docker system prune -af --filter "label=com.docker.compose.service=app" &&
            make build
        '


  generate-git-tag:
    name: GitHub Tag
    runs-on: ubuntu-latest
    outputs:
      tag: ${{ steps.taggerFinal.outputs.new_tag }}
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Generate Final Version
      id: taggerFinal
      uses: anothrNick/github-tag-action@1.64.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # if you don't want to set write permissions use a PAT token
        WITH_V: false

    - name: Echo new Tag
      run: |
        echo "The next tag version will be: ${{ steps.taggerFinal.outputs.new_tag }}"

  generate-git-release:
    name: GitHub Release
    runs-on: ubuntu-latest
    needs: generate-git-tag
    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Release Action
      id: release
      uses: ncipollo/release-action@v1
      with:
        tag: ${{ needs.generate-git-tag.outputs.tag }}
        token: ${{ secrets.CHANGELOG_RELEASE }}


# In case you are using sentry, you can use this action to create a release on sentry
#   generate-sentry-release:
#     needs: [generate-git-tag, generate-git-release]
#     name: Sentry Release
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout repo
#       uses: actions/checkout@v3
#       with:
#         fetch-depth: 0
#     - name: Split Repo name
#       uses: winterjung/split@v2
#       id: split_repo_name
#       with:
#         msg: ${{ github.repository }}
#         separator: /
#         maxsplit: 1
#     - name: Echo Repo Name
#       run: |
#         echo "Repo Name: ${{ steps.split_repo_name.outputs._1 }}"
#     - name: Sentry Release
#       uses: getsentry/action-release@v1
#       env:
#         SENTRY_AUTH_TOKEN: ${{ secrets.SENTRY_AUTH_TOKEN }}
#         SENTRY_ORG: ${{ secrets.SENTRY_ORG }}
#         SENTRY_PROJECT: ${{ secrets.SENTRY_PROJECT }}
#       with:
#         environment: production
#         version: ${{ steps.split_repo_name.outputs._1 }}@${{ needs.generate-git-tag.outputs.tag}}
